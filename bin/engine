#!/bin/bash
SCRIPT=`realpath $0`
SCRIPTPATH=`dirname $SCRIPT`
source $SCRIPTPATH/_helpers.sh

if [ -x "$(command -v realpath)" ]; then
    cd $(dirname $(realpath $0))
    cd ..
fi

down() {
    docker-compose${DOCKEREXE} -f ./docker-compose.yml down -v
}

up() {
    docker-compose${DOCKEREXE} -f ./docker-compose.yml up -d
}

up-rebuild() {
    docker-compose${DOCKEREXE} -f ./docker-compose.yml up -d --force-recreate --build
}

config_build() {
    docker${DOCKEREXE} build -f etc/img/config.Dockerfile ./ --no-cache -t engine-config:latest 
    docker${DOCKEREXE} run engine-config:latest python -- /app/index.py > ./docker-compose.yml
    docker${DOCKEREXE} run engine-config:latest python -- /app/nginx.py > ./nginx.conf
    docker-compose${DOCKEREXE} build --no-cache web
}

start() {
    docker-compose${DOCKEREXE} start
}

stop() {
    docker-compose${DOCKEREXE} stop
}

default() {
    cat etc/banner.txt
    echo $"Usage: $0 {start|stop|restart|condrestart|status}"

    echo -e "\ncommands, e.g. engine <command>: \n"

    cat bin/engine |  grep ') ##' | grep -v 'bin/engine' | sed 's/) ## /\t/'

    echo -e "\n"
}


case "$1" in
        bash) ## launches a bash instance into a given container, i.e. `engine bash php70` or `engine bash web`
            if [ -z "$3" ]
            echo -e "Connecting to bash instance of the \e[1m$2\033[0m container..."
            then
                if [ ! $DOCKEREXE ]
                then 
                    docker$DOCKEREXE exec -it engine_$2_1 /bin/bash -c 'cd /sites; exec "${SHELL:-sh}"; $2'
                else 
                    docker$DOCKEREXE exec -i engine_$2_1 /bin/bash -c 'cd /sites; exec "${SHELL:-sh}"; $2'
                fi
            else
                if [ ! $DOCKEREXE ]
                then 
                     docker$DOCKEREXE exec -it engine_$2_1 $3
                else 
                     docker$DOCKEREXE exec -i engine_$2_1 $3
                fi
            fi
            ;;
         
        log) ## Shows composition logs, pass service name as parameter to isolate
            docker-compose${DOCKEREXE} -f ./docker-compose.yml logs -f $2
            ;;

        debug) ## restarts, runs tests and kicks off logs
            bin/engine test
            bin/engine log
            ;;

        test) ## runs through unit tests, pass specifc test filename (without extention) to run single test

            echo $TRAVIS_OS_NAME
            if [ \( "$TRAVIS_OS_NAME" == "osx" \) -o \( "$TRAVIS_OS_NAME" == "win" \) ] 
            then 
                bin/tests --dockerless            
            else
                config_build
                up
                bin/tests $2
            fi
            ;;
        
        start) ## starts the compostion, use up command instead
            start
            ;;

        stop) ## stops compoistion, use the down command instead
            stop
            ;;

        config-build) ## rebuilds composition with new config
            echo ''
            echo 'Building engine composition from'
            config_build
            ;;

        config-bash) 
            docker${DOCKEREXE} run -it engine-config:latest bash
            ;;

        config-reload)
            docker-compose${DOCKEREXE} -f ./docker-compose.yml build --no-cache web
            up
            ;;

        build)
            config_build
    	    docker-compose${DOCKEREXE} -f ./docker-compose.yml build --no-cache
            ;;

        down) ## brings down the engine composition
    	    down
            ;;

        update) ## updates engine to latest release, pass in version to peg
    	    sh bin/update $2 $3
            ;;


        up) ## brings up the engine composition
            down
            config_build
	        up
            ;;

        up-rebuild) ## brings up the composition, but forces a rebuild
            down
            config_build
	        up-rebuild
            ;;

        download-cli-tools) ## fetches various cli tools for use with `engine bash`
            FILES=./etc/cli-tools/*
            for f in $FILES
            do
                echo "Fetching $(basename ${f%.*})..."
                $(cat $f) > ./var/cli-tools/$(basename ${f%.*})
            done
            ;;

        help) ## this help
            default
             ;;

        *)
            default



esac